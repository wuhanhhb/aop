import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

dependencies {
    compile 'org.aspectj:aspectjrt:1.8.6'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

android.libraryVariants.all { variant ->
    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = [
                "-showWeaveInfo",
                "-1.8",
                "-inpath", javaCompile.destinationDir.toString(),
                "-aspectpath", javaCompile.classpath.asPath,
                "-d", javaCompile.destinationDir.toString(),
                "-classpath", javaCompile.classpath.asPath,
                "-bootclasspath", android.bootClasspath.join(File.pathSeparator)
        ]

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler)

        def log = project.logger
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}

//next all add to bintray
//apply plugin: 'com.novoda.bintray-release'
//
//tasks.withType(JavaCompile) {
//    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
//}
//
//publish {
//    userOrg = 'sxhebing'
//    groupId = 'com.sx.aop'
//    artifactId = 'runtime'
//    publishVersion = '1.0.0'
//    desc = 'Aop Util'
//    website = 'https://github.com/wuhanhhb/aop'
//    dryRun = false
//}
//
//task androidJavadocs(type: Javadoc) {
//    source = android.sourceSets.main.java.source
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
//    classifier = 'javadoc'
//    from androidJavadocs.destinationDir
//}
//
//task androidSourcesJar(type: Jar) {
//    classifier = 'sources'
//    from android.sourceSets.main.java.source
//}
//
//artifacts {
//    archives androidSourcesJar
//    archives androidJavadocsJar
//}
